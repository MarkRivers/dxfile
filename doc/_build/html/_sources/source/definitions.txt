.. role:: math(raw)   :format: html latex..Definition==========The examples in this section show how one can store data for imagingexperiments using the Data Exchange format. It is general enough,however, to show how Data Exchange can be extended or adapted to othertechniques. These examples are meant to give a flavor for our approach.A complete reference to the core structure can be found in Section[sec:corereference`. Technique specific extensions to the core structurecan be found at the end of the Reference Guide.Color code----------All the diagrams in this section follow the color conventions shown inFigure :data shift x, data shift yref:`DiagramColorCode`. The basic elements are HDF5 datasets,attributes, and groups. We also support internal references to elementsin the file by a simple scalar string that holds the path of the datasetwithin the file. On the diagram, this is shown as a reference datasetthat points to the referred-to dataset. Note that we use this mechanismrather than HDF5 hard or soft links 

.. _DiagramColorCode:.. figure:: figures/dx_DiagramColorCode.png   :align: center
   :alt: Explanation of the color code used in the diagrams   :width: 50.0%   Explanation of the color code used in the diagrams
Imaging-------Figures :ref:`Minimal1` shows a diagram of a minimal Data Exchange fileto store a single projection image. It is strongly encouraged that alldatasets shall have a units attribute. The axes of the dataset are notspecified in this minimal case, and can be assumed to be x and y with azero-based integer sequence, or more simply, pixels... _Minimal1:

.. figure:: figures/dx_Minimal1.png   :align: center
   :alt: Diagram of a minimal Data Exchange file for a single image.   :width: 50.0%   Diagram of a minimal Data Exchange file for a single image.Multidimensional data---------------------A multidimensional dataset should be described as fully as possible,with units for the dataset as well as dimension descriptors (that alsohave units defined). There are also additional descriptive fieldsavailable such as title and description. The order of dimensions in thedataset should put the slowest changing dimension first, and the fastestchanging dimension last.It is strongly encouraged that all datasets have a units attribute. Thestring value for units should preferably be an SI unit, however wellunderstood non-SI units are acceptable, in particular “degrees”. Theunits strings should conform to those defined by UDUNITS athttp://www.unidata.ucar.edu/software/udunits. While UDUNITS is asoftware package, it contains simple XML files that describe unitsstrings and acceptable aliases.The axes of a multidimensional dataset are described through the use ofadditional one-dimensional datasets (dimension descriptors), one foreach axis in the main dataset. Take for example a 3-dimensional cube ofimages, with axes of x, y, and z where z represents the angle of thesample when each image was taken. There should be 3 additionalone-dimensional datasets called x, y, and z where x and y contain aninteger sequence, and z contains a list of angles. X and y have units of“counts” and z has units of “degrees”. To simplify, it is acceptable toomit x and y, since the default interpretation will always be an integersequence.The dimension descriptors (x, y, and z) can be associated with the maindataset through two mechanisms. The HDF5 libraries contain a functioncall H5DSattach\_scale to “attach” a dimension descriptor dataset to agiven dimension of the main dataset. HDF5 takes care of entering severalattributes in the file that serve to keep track of this association. Ifthe particular programming language you work in does not support thisHDF5 function, then you can instead add a string attribute to your maindataset called axes. The axes attribute is simply a colon separatedstring naming the dimension descriptor datasets in order, so “z:y:x” inthis case. Additional examples below show this in action.
